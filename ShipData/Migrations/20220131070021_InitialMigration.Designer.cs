// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShipData;

#nullable disable

namespace CSharpExpressionsExamples.Migrations
{
    [DbContext(typeof(ExampleDbContext))]
    [Migration("20220131070021_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.1");

            modelBuilder.Entity("CSharpExpressionsExamples.Data.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_producers");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_producers_name");

                    b.ToTable("producers", (string)null);
                });

            modelBuilder.Entity("CSharpExpressionsExamples.Data.Entities.Ship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Bore")
                        .HasColumnType("INTEGER")
                        .HasColumnName("bore");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("country_id");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<DateTime>("LaunchedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("launched_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<decimal>("NormalDisplacement")
                        .HasColumnType("TEXT")
                        .HasColumnName("normal_displacement");

                    b.Property<int>("NumberGuns")
                        .HasColumnType("INTEGER")
                        .HasColumnName("number_guns");

                    b.Property<Guid>("UniqueId")
                        .HasColumnType("TEXT")
                        .HasColumnName("unique_id");

                    b.HasKey("Id")
                        .HasName("pk_ships");

                    b.HasIndex("CountryId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_ship_name");

                    b.HasIndex("UniqueId")
                        .IsUnique()
                        .HasDatabaseName("ix_unique_id");

                    b.ToTable("ships", (string)null);
                });

            modelBuilder.Entity("CSharpExpressionsExamples.Data.Entities.Ship", b =>
                {
                    b.HasOne("CSharpExpressionsExamples.Data.Entities.Country", "Country")
                        .WithMany("Ships")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("CSharpExpressionsExamples.Data.Entities.Country", b =>
                {
                    b.Navigation("Ships");
                });
#pragma warning restore 612, 618
        }
    }
}
